# *** Функции *** 

# Функции можно представить как "фабрику", со входом и выходом

# Функция оперирует данными (объектами)

#  Вариант 1. Функция, которая не имеет входа и выхода

# создание (определение) функции
def func_1():
    print("Hello!")

#вызов функции
# func_1()

def func_2():
    name = "Alexandra"
    print(f"Hello, {name}!") # способ форматирования f-string

# func_2()

# Вариант 2. Функция, которая имеет вход (-ы), но не имеет выхода(-ов)(ничего не возвращает)

# Вход функции - это аргумент

def func_3(argument_1):
    """
    Пример функции с 1-м аргументом под названием argument_1
    """
    result = argument_1 ** 2
    print(result)

# func_3(100) # значение, которое отправляем в функцию называется параметром

def func_4(arg_1, arg_2):
    result = arg_1 + arg_2
    print(result)

# вызов функции с передачей 2-х параметров
# func_4(20, 70) 

# Вариант 2.1. Функция, у которой аргументы имеют значения по умолчанию

def func_5(arg_1, arg_2, arg_3=10):
    result = arg_1 + arg_2 + arg_3
    print(result)

# func_5(10,20) # третьему аргументу передается параметр
# func_5(10,20,5) # третьему аргументу НЕ передается параметр

# *** Позиционные параметры и именованные параметры ***

def custom_sum(a=10, b=20, c=30):
    res = a + b + c
    print(res)

# позиционные параметры
# custom_sum(5, 5) # параметры присваиваются согласно порядку расположения аргументов

# именованные параметры
# custom_sum(c=100) # параметр присваивается конкретному аргументу

# Вариант 2.2. Множественные аргументы

# Множественные позиционные параметры
# можно передавать произвольное количество позиционных параметров
def func_6(*args):
    print(args)

# func_6(100, 200, 300, 400, 500)

def func_7(*args):
    # функция, аккумулирующая (накапливающая) значения параметров в переменной res
    res = 0
    for var in args:
        res += var
    print(res)
# func_7(10, 20, 30, 10)

# множественные именованные параметры
# можем передать произвольное кол-во именованных параметров

def func_8(**kwargs):
    print(kwargs)

# func_8(a=10, b=20, c=30)

# *** Пример. Данные человека ***

def person_data_parser(**args):

    for parameter, value in args.items():
        print(f"{parameter} : {value}")

person_data_parser(name="Sasha", age=26, prog_lang='Eng')
person_data_parser(name="Kostya", age=27)